// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Define the generator for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// generator nestjs {
  // provider = "prisma-generator-nestjs-dto"
  // output   = "../src/dto" // Chemin où les DTO seront générés
//}

// Define the datasource (PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Enum for user roles
enum UserRole {
  CLIENT
  ADMIN
  SELLER
}

// Enum for order statuses
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  RETURNED
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RETURNED
  LOST
  DAMAGED
  CANCELLED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  OVERNIGHT
  SAME_DAY
  ECONOMY
  TWO_DAY
}

enum Currency {
  USD
  EUR
  GBP
  JPY
  CNY
  XOF
  AUD
  CAD
  CHF
  INR
  BRL
  ZAR
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum NotificationType {
  PROMOTION
  ORDER_UPDATE
  INFO
  WARNING
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  HIGH
  RESOLVED
  CLOSED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum UserActivityAction {
  LOGIN
  VIEW_PRODUCT
  PURCHASE
  LOGOUT
  ADD_TO_CART
  REMOVE_FROM_CART
  SEARCH
  OTHER
}

enum AuditLogAction {
  CREATED
  UPDATED
  DELETED
}

// User Model: Represents users with roles like client, admin, or seller
model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  password        String?        // Optional car auth Google n'a pas de password
  name            String
  isEmailVerified Boolean        @default(false)
  authProvider    String         @default("LOCAL") // "LOCAL" ou "GOOGLE"
  googleId        String?        @unique
  lastLogin       DateTime?
  role            UserRole       @default(CLIENT)
  profile         UserProfile?
  addresses       Address[]
  orders          Order[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  vendor          Vendor?
  cart            Cart[]
  review          Review[]
  notification    Notification[]
  ticket          Ticket[]
  subsite         Subsite[]
  userActivity    UserActivity[]
  auditLog        AuditLog[]
}

// User Profile Model
model UserProfile {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id])
  phone    String?
  birthday DateTime?
  gender   String?
}

// Address Model: Stores addresses for users
model Address {
  id         Int    @id @default(autoincrement())
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
  street     String
  city       String
  state      String
  postalCode String
  country    String
}

// Vendor Model: Represents a seller/vendor
model Vendor {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int           @unique
  storeName      String
  products       Product[]     @relation("VendorProducts")
  subscription   Subscription? @relation(name: "VendorSubscription", fields: [subscriptionId], references: [id])
  subscriptionId Int?
  shop           Shop?
}

// Shop Model: Represents a generated e-commerce site for each vendor
model Shop {
  id                      Int                      @id @default(autoincrement())
  name                    String
  url                     String                   @unique
  description             String?
  vendor                  Vendor                   @relation(fields: [vendorId], references: [id])
  vendorId                Int                      @unique
  products                Product[]
  orders                  Order[]
  categories              Category[]
  newsletterSubscriptions NewsletterSubscription[] // Relation with NewsletterSubscription
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  marketplace             Marketplace?             @relation(fields: [marketplaceId], references: [id])
  marketplaceId           Int?
}

// Product Model: Represents products in the catalog
model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  price       Float
  currency    Currency
  promotions  Promotion[]
  category    Category         @relation(fields: [categoryId], references: [id])
  categoryId  Int
  images      ProductImage[]
  variants    ProductVariant[]
  stock       Int
  vendor      Vendor?          @relation("VendorProducts", fields: [vendorId], references: [id])
  shop        Shop             @relation(fields: [shopId], references: [id])
  shopId      Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  vendorId    Int?
  cartItem    CartItem[]
  orderItem   OrderItem[]
  review      Review[]
}

// Product Image Model
model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  url       String
}

// Product Variant Model: For product options like size, color
model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  name      String
  value     String
}

// Category Model: For organizing products
model Category {
  id       Int        @id @default(autoincrement())
  name     String
  parent   Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  parentId Int?
  children Category[] @relation("CategoryChildren")
  products Product[]
  shop     Shop?      @relation(fields: [shopId], references: [id])
  shopId   Int?
}

model Cart {
  id                   Int        @id @default(autoincrement())
  userId               Int
  totalPrice           Int        @default(0)
  totalQuantity        Int        @default(0)
  estimatedShippingCost Float     @default(0.0)
  user                 User       @relation(fields: [userId], references: [id])
  items                CartItem[]
}

// CartItem Model: Items in the cart
model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

// Order Model: Represents orders placed by users
model Order {
  id             Int            @id @default(autoincrement())
  userId         Int
  user           User           @relation(fields: [userId], references: [id])
  shopId         Int
  shop           Shop           @relation(fields: [shopId], references: [id])
  items          OrderItem[]
  status         OrderStatus
  totalAmount    Float
  paymentId      String?
  trackingNumber String?
  shipmentId     Int?           @unique
  shipment       Shipment?      @relation(name: "OrderToShipment", fields: [shipmentId], references: [id])
  shippingMethod ShippingMethod
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  payments       Payment[]
  refunds        Refund[]
}

// OrderItem Model: Items in an order
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payment Model: Stores payment details
model Payment {
  id         Int           @id @default(autoincrement())
  orderId    Int
  order      Order         @relation(fields: [orderId], references: [id])
  method     String // e.g., Stripe, PayPal, Bank Transfer
  status     PaymentStatus // e.g., SUCCESS, FAILED, PENDING
  amount     Float
  providerId String?
  metadata   Json?
  currency   Currency
  createdAt  DateTime      @default(now())
}

// Carrier Model: Stores carrier details
model Carrier {
  id             Int            @id @default(autoincrement())
  name           String
  country        String // Country where the carrier operates
  region         String? // Specific region or city (if applicable)
  shippingRates  ShippingRate[]
  shipments      Shipment[]
  externalAPI    String? // Carrier's API URL (if available)
  supportedZones Zone[] // Zones that this carrier supports
  capabilities   String? // Additional capabilities or notes (e.g., 'Refrigerated', 'Express')
}

// ShippingRate Model: Stores shippingRate details
model ShippingRate {
  id        Int      @id @default(autoincrement())
  carrierId Int
  carrier   Carrier  @relation(fields: [carrierId], references: [id])
  zoneId    Int
  zone      Zone     @relation(fields: [zoneId], references: [id])
  weightMin Float // Minimum weight in kg
  weightMax Float // Maximum weight in kg
  cost      Float // Shipping cost for this weight range
  currency  Currency // Currency used for this rate (e.g., EUR, XOF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([carrierId, zoneId, weightMin, weightMax])
}

// Shipment Model: Stores shipment details
model Shipment {
  id              Int            @id @default(autoincrement())
  orderId         Int?           @unique
  order           Order?         @relation(name: "OrderToShipment")
  carrierId       Int
  carrier         Carrier        @relation(fields: [carrierId], references: [id])
  trackingNumber  String
  status          ShipmentStatus // Using enumeration for statuses
  shippedAt       DateTime?
  deliveredAt     DateTime?
  statusUpdatedAt DateTime? // Date of the last status update
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([orderId, trackingNumber])
}

// Zone Model: Stores zone details
model Zone {
  id           Int            @id @default(autoincrement())
  country      String // Country name
  region       String? // Specific region or city (optional)
  carriers     Carrier[] // Carriers serving this zone
  ShippingRate ShippingRate[]
}

// Review Model: Product reviews and ratings
model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int      @default(1) // e.g., 1 to 5 stars
  comment   String?
  flagged   Boolean  @default(false)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Newsletter Model: For email marketing subscriptions
model NewsletterSubscription {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true) // Indicates if the subscription is active
  shop         Shop     @relation(fields: [shopId], references: [id])
  shopId       Int // Foreign key to reference the Shop
}

// Notification Model: For push notifications and email updates
model Notification {
  id      Int              @id @default(autoincrement())
  userId  Int
  user    User             @relation(fields: [userId], references: [id])
  type    NotificationType // e.g., PROMOTION, ORDER_UPDATE
  content String
  read    Boolean          @default(false)
  sentAt  DateTime         @default(now())
}

// Ticket Model: For support requests
model Ticket {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  subject     String
  description String
  status      TicketStatus // e.g., OPEN, IN_PROGRESS, RESOLVED
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Promotion Model: Represents Promotion plans for products
model Promotion {
  id            Int          @id @default(autoincrement())
  name          String
  discountValue Float
  discountType  DiscountType
  startDate     DateTime
  endDate       DateTime
  product       Product      @relation(fields: [productId], references: [id])
  productId     Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([productId])
}

// Subscription Model: Represents subscription plans for vendors
model Subscription {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  currency    Currency
  duration    Int // Duration in days or months
  vendors     Vendor[] @relation("VendorSubscription")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Refund {
  id        Int          @id @default(autoincrement())
  orderId   Int
  order     Order        @relation(fields: [orderId], references: [id])
  reason    String // refunf reason
  amount    Float
  status    RefundStatus // e.g., PENDING, APPROVED, REJECTED
  createdAt DateTime     @default(now())
}

model Subsite {
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  config    Json
  createdAt DateTime @default(now())
}

model UserActivity {
  id        Int                @id @default(autoincrement())
  userId    Int
  user      User               @relation(fields: [userId], references: [id])
  action    UserActivityAction // e.g., VIEWED_PRODUCT, ADDED_TO_CART
  productId Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model AuditLog {
  id        Int            @id @default(autoincrement())
  userId    Int
  user      User           @relation(fields: [userId], references: [id])
  action    AuditLogAction // e.g., CREATED, UPDATED, DELETED
  entity    String // Entité concernée, par exemple "Product", "Order"
  entityId  Int
  changes   Json
  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
}

// Marketplace Model: To list all generated shops and provide a directory
model Marketplace {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  shops       Shop[]
}
